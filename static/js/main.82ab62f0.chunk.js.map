{"version":3,"sources":["components/Home.js","components/Countries.js","components/CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["Home","id","Countries","history","useQuery","gql","loading","error","data","countries","map","country","className","onClick","e","code","push","name","continent","languages","language","native","join","CountryDetails","match","params","currency","phone","client","ApolloClient","uri","App","exact","to","activeClassName","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAIO,SAASA,IACZ,OACI,yBAAKC,GAAG,aACJ,8EAEA,qIAEA,qJAEA,mDAEA,4BACI,+DACA,yEACA,uFAGJ,4CAEA,4BACI,iEACA,wDAEI,4BACI,qFACA,gGACA,+HAGR,yDACA,wOACA,sHACA,oJACA,sC,iWC/BT,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAAW,EACFC,YAASC,YAAA,MAAlCC,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,MAAOC,EADW,EACXA,KAmBlBC,EAAaF,EAAQ,GAAKC,EAAKC,UAErC,OACI,yBAAKR,GAAG,gBAECK,GAAYC,EAiBT,2CAhBA,kBAAC,WAAD,KAEQE,EAAUC,IAAI,SAAAC,GAAO,OACjB,yBAAKC,UAAU,UAAUC,QAAS,SAAAC,GAAC,OAX3CC,EAW2DJ,EAAQI,KAX3DZ,EAAQa,KAAR,qBAA2BD,IAAnC,IAAAA,IAYY,yBAAKH,UAAU,QAAQD,EAAQI,MAC/B,yBAAKH,UAAU,QAAQD,EAAQM,KAA/B,KAAuCN,EAAQO,UAAUD,KAAzD,KACA,yBAAKL,UAAU,aAEPD,EAAQQ,UAAUT,IAAI,SAAAU,GAAQ,gBAAQA,EAASC,OAAjB,aAA4BD,EAASH,KAArC,OAA+CK,KAAK,Y,qNClCvH,SAASC,EAAT,GAAoC,IAAVC,EAAS,EAATA,MAAS,EACLpB,YAASC,YAAA,IAErBmB,EAAMC,OAAOV,OAF1BT,EAD8B,EAC9BA,QAASC,EADqB,EACrBA,MAAOC,EADc,EACdA,KAWlBG,EAAWJ,EAAQ,KAAOC,EAAKG,QAErC,OACI,yBAAKV,GAAG,mBAECK,GAAYC,EAcT,2CAbA,kBAAC,WAAD,KACI,4BAAKI,EAAQM,MACb,yBAAKL,UAAU,YACX,yBAAKA,UAAU,SAAf,YACCD,EAAQe,UAAY,QAGzB,yBAAKd,UAAU,SACX,yBAAKA,UAAU,SAAf,cADJ,IAEMD,EAAQgB,OAAS,S,UCrBzCC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,uCA+BQC,MA5Bf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,yBAAKhB,UAAU,OACb,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASoB,OAAK,EAACC,GAAG,IAAIC,gBAAgB,UAAtC,SAGF,4BACE,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,aAAaC,gBAAgB,UAA/C,sBAMR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,mBAAmBC,UAAWb,IAC1C,kBAAC,IAAD,CAAOY,KAAK,aAAaC,UAAWlC,QCzB1BmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.82ab62f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Home.scss';\r\n\r\nexport function Home() {\r\n    return (\r\n        <div id=\"home-page\">\r\n            <h2>Front-end task of Code Challenge for Scoutbase</h2>\r\n\r\n            <p>This task is for demonstrating your understanding of HTML, CSS, Javascript, React & related libraries.</p>\r\n\r\n            <p>If youâ€™re doing the front-end only, you must use the https://countries.trevorblades.com endpoint for GraphQL API.</p>\r\n\r\n            <p>Preferred libraries:</p>\r\n\r\n            <ol>\r\n                <li>`styled-components` for styling</li>\r\n                <li>`apollo-client` for consuming GraphQL API</li>\r\n                <li>`react-router` or any alternative to implement routing</li>\r\n            </ol>\r\n\r\n            <p>Instructions:</p>\r\n            \r\n            <ol>\r\n                <li>Create a `create-react-app` repo.</li>\r\n                <li>\r\n                    Add a router with routes:\r\n                    <ul>\r\n                        <li>`/` - for displaying basic links for the other routes</li>\r\n                        <li>`/countries` - for requesting GraphQL API and rendering the list</li>\r\n                        <li>`/countries/(:code)` - for requesting GraphQL API and rendering the properties of a continent</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Design is totally by you.</li>\r\n                <li>Countries list at `/countries` must contain the list of countries and the languages spoken in that country. Both in English and native languages. It should also contain the continent it is located in.</li>\r\n                <li>`/countries/(:code)` must render the currency and a area code (phone) of that country.</li>\r\n                <li>Routes must be fully loadable with a direct link. `/countries/CI` must render the page for Ivory Coast, for example.</li>\r\n                <li>End.</li>\r\n            </ol>\r\n        </div>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport './Countries.scss';\r\n\r\nexport function Countries({ history }) {\r\n    const { loading, error, data } = useQuery(gql`\r\n    {\r\n        countries {\r\n            name\r\n            code\r\n            continent {\r\n                name\r\n            }\r\n            languages {\r\n                code\r\n                native\r\n                name\r\n            }\r\n        }\r\n    }\r\n    `);\r\n\r\n    const goToCountry = code => history.push(`/countries/${code}`);\r\n\r\n    const countries = (error ? [] : data.countries);\r\n\r\n    return (\r\n        <div id=\"country-list\">\r\n            {\r\n                !loading && !error ? (\r\n                    <Fragment>\r\n                        {\r\n                            countries.map(country => (\r\n                                <div className=\"country\" onClick={e => goToCountry(country.code)}>\r\n                                    <div className=\"code\">{country.code}</div>\r\n                                    <div className=\"name\">{country.name} ({country.continent.name})</div>\r\n                                    <div className=\"languages\">\r\n                                        {\r\n                                            country.languages.map(language => (`${language.native} (${language.name})`)).join(', ')\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </Fragment>\r\n                ) : (\r\n                    <div>Loading...</div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport './CountryDetails.scss';\r\n\r\nexport function CountryDetails({ match }) {\r\n    const { loading, error, data } = useQuery(gql`\r\n    {\r\n        country(code: \"${match.params.code}\") {\r\n            name\r\n            code\r\n            phone\r\n            currency\r\n        }\r\n    }\r\n  `);\r\n\r\n    const country = (error ? null : data.country);\r\n\r\n    return (\r\n        <div id=\"country-details\">\r\n            {\r\n                !loading && !error ? (\r\n                    <Fragment>\r\n                        <h2>{country.name}</h2>\r\n                        <div className=\"currency\">\r\n                            <div className=\"label\">Currency</div>\r\n                            {country.currency || 'None'}\r\n                        </div>\r\n\r\n                        <div className=\"phone\">\r\n                            <div className=\"label\">Phone code</div>\r\n                            +{country.phone || '000'}\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                    <div>Loading...</div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { HashRouter as Router, NavLink , Route, Switch } from 'react-router-dom';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport {Home} from './components/Home';\nimport {Countries} from './components/Countries';\nimport {CountryDetails} from './components/CountryDetails';\n\nimport './App.scss';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com'\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <div className='App'>\n          <nav>\n            <ul>\n              <li>\n                <NavLink exact to='/' activeClassName=\"active\">Home</NavLink>\n              </li>\n\n              <li>\n                <NavLink exact to='/countries' activeClassName=\"active\">Countries list</NavLink>\n              </li>\n            </ul>\n          </nav>\n        </div>\n\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/countries/:code' component={CountryDetails} />\n          <Route path='/countries' component={Countries} />\n        </Switch>\n      </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}