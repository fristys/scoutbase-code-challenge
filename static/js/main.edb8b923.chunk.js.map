{"version":3,"sources":["components/Home.js","components/Loading.js","components/ErrorMessage.js","components/Country.js","components/Countries.js","components/CountryDetail.js","components/CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["Home","id","Loading","ErrorMessage","error","JSON","stringify","Country","history","country","className","onClick","code","push","name","continent","languages","map","language","native","join","Countries","useQuery","gql","loading","data","countries","CountryDetail","currency","phone","CountryDetails","match","params","client","ApolloClient","uri","App","exact","to","activeClassName","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edb8b923.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Home.scss';\n\nexport function Home() {\n  return (\n    <div id=\"home-page\">\n      <h2>Front-end task of Code Challenge for Scoutbase</h2>\n\n      <p>\n        This task is for demonstrating your understanding of HTML, CSS,\n        Javascript, React & related libraries.\n      </p>\n\n      <p>\n        If youâ€™re doing the front-end only, you must use the\n        https://countries.trevorblades.com endpoint for GraphQL API.\n      </p>\n\n      <p>Preferred libraries:</p>\n\n      <ol>\n        <li>`styled-components` for styling</li>\n        <li>`apollo-client` for consuming GraphQL API</li>\n        <li>`react-router` or any alternative to implement routing</li>\n      </ol>\n\n      <p>Instructions:</p>\n\n      <ol>\n        <li>Create a `create-react-app` repo.</li>\n        <li>\n          Add a router with routes:\n          <ul>\n            <li>`/` - for displaying basic links for the other routes</li>\n            <li>\n              `/countries` - for requesting GraphQL API and rendering the list\n            </li>\n            <li>\n              `/countries/(:code)` - for requesting GraphQL API and rendering\n              the properties of a continent\n            </li>\n          </ul>\n        </li>\n        <li>Design is totally by you.</li>\n        <li>\n          Countries list at `/countries` must contain the list of countries and\n          the languages spoken in that country. Both in English and native\n          languages. It should also contain the continent it is located in.\n        </li>\n        <li>\n          `/countries/(:code)` must render the currency and a area code (phone)\n          of that country.\n        </li>\n        <li>\n          Routes must be fully loadable with a direct link. `/countries/CI` must\n          render the page for Ivory Coast, for example.\n        </li>\n        <li>End.</li>\n      </ol>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function Loading() {\n  return (\n    <div>\n      Loading data...\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function ErrorMessage({ error }) {\n  return (\n    <div>\n      Error occurred: {JSON.stringify(error)}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function Country({ history, country }) {\n  const goToCountry = code => history.push(`/countries/${code}`);\n\n  return (\n    <div className=\"country\" onClick={() => goToCountry(country.code)}>\n      <div className=\"code\">{country.code}</div>\n\n      <div className=\"name\">\n        {country.name} ({country.continent.name})\n      </div>\n\n      <div className=\"languages\">\n        {country.languages.map(language => `${language.native} (${language.name})`).join(', ')}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nimport { Loading } from './Loading';\nimport { ErrorMessage } from './ErrorMessage';\nimport { Country } from './Country';\n\nimport './Countries.scss';\n\nexport function Countries({ history }) {\n  const { loading, error, data } = useQuery(gql`\n    {\n      countries {\n        name\n        code\n        continent {\n          name\n        }\n        languages {\n          code\n          native\n          name\n        }\n      }\n    }\n  `);\n\n  const countries = (error ? [] : data.countries);\n\n  return (\n    <div id=\"country-list\">\n      {loading ? <Loading /> : (error ? <ErrorMessage error={error} /> : countries.map(country => <Country history={history} country={country} />))}\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\n\nexport function CountryDetail({ country }) {\n  return (\n    <Fragment>\n      <h2>{country.name}</h2>\n\n      <div className=\"currency\">\n        <div className=\"label\">Currency</div>\n        {country.currency || 'None'}\n      </div>\n\n      <div className=\"phone\">\n        <div className=\"label\">Phone code</div>\n        +{country.phone || '000'}\n      </div>\n    </Fragment>\n  );\n}\n","import React from 'react';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nimport { Loading } from './Loading';\nimport { ErrorMessage } from './ErrorMessage';\nimport { CountryDetail } from './CountryDetail';\n\nimport './CountryDetails.scss';\n\nexport function CountryDetails({ match }) {\n  const { loading, error, data } = useQuery(gql`\n    {\n        country(code: \"${match.params.code}\") {\n            name\n            code\n            phone\n            currency\n        }\n    }\n  `);\n\n  const country = (error ? null : data.country);\n\n  return (\n    <div id=\"country-details\">\n      {loading ? <Loading /> : (error ? <ErrorMessage error={error} /> : <CountryDetail country={country} />)}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport {\n  // Use HashRouter for GH pages deployment\n  BrowserRouter as Router,\n  NavLink,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport { Home } from './components/Home';\nimport { Countries } from './components/Countries';\nimport { CountryDetails } from './components/CountryDetails';\n\nimport './App.scss';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com'\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <nav>\n            <ul>\n              <li>\n                <NavLink exact to=\"/\" activeClassName=\"active\">\n                  Home\n                </NavLink>\n              </li>\n\n              <li>\n                <NavLink exact to=\"/countries\" activeClassName=\"active\">\n                  Countries list\n                </NavLink>\n              </li>\n            </ul>\n          </nav>\n        </div>\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/countries/:code\" component={CountryDetails} />\n          <Route path=\"/countries\" component={Countries} />\n        </Switch>\n      </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}