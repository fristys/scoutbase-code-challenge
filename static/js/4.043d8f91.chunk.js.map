{"version":3,"sources":["../node_modules/@apollo/react-hooks/lib/react-hooks.esm.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","components/ErrorMessage.js","components/CountryDetail.js","components/CountryDetails.js"],"names":["OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","execute","skip","query","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","children","opts","displayName","onCompleted","onError","partialRefetch","fetchPolicy","obs","watchQuery","renderPromises","registerSSRObservable","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","updatedOptions","variables","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","metadata","reactComponent","observableQueryFields","observable","refetch","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","initializeObservableQuery","getSSRObservable","observableQueryOptions","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","error","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","create","currentResult","partial","errors","length","graphQLErrors","keys","unsubscribe","useBaseQuery","x","tick","queryDataRef","current","queryData","memoFn","key","ref","value","useDeepMemo","useQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","previousResult","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","endSubscription","startSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","props","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties","ErrorMessage","CountryDetail","country","name","className","currency","phone","CountryDetails","match","gql","params","code","id","Loading"],"mappings":"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","file":"static/js/4.043d8f91.chunk.js","sourcesContent":["import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __rest, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions) {\n    if (!equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    if (this.getOptions().skip) return false;\n\n    var _a = this.getOptions(),\n        children = _a.children,\n        ssr = _a.ssr,\n        displayName = _a.displayName,\n        skip = _a.skip,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        partialRefetch = _a.partialRefetch,\n        opts = __rest(_a, [\"children\", \"ssr\", \"displayName\", \"skip\", \"onCompleted\", \"onError\", \"partialRefetch\"]);\n\n    var fetchPolicy = opts.fetchPolicy;\n    if (ssr === false) return false;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first';\n    }\n\n    var obs = this.refreshClient().client.watchQuery(__assign({}, opts, {\n      fetchPolicy: fetchPolicy\n    }));\n\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(obs, this.getOptions());\n    }\n\n    var currentResult = this.currentObservable.query.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n      setTimeout(function () {\n        _this.currentObservable.query && _this.currentObservable.query.resetQueryStoreErrors();\n      });\n    }\n\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    var lazyOptions = this.lazyOptions || {};\n\n    var updatedOptions = __assign({}, options, {\n      variables: __assign({}, options.variables, lazyOptions.variables),\n      context: __assign({}, options.context, lazyOptions.context)\n    });\n\n    if (this.runLazy) {\n      delete updatedOptions.skip;\n    }\n\n    return updatedOptions;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var result;\n    var ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: {}\n    };\n\n    if (this.context && this.context.renderPromises) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult);\n\n      if (!result) {\n        result = ssrLoading;\n      }\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    this.verifyDocumentType(this.getOptions().query, DocumentType.Query);\n    var displayName = this.getOptions().displayName || 'Query';\n    return __assign({}, this.getOptions(), {\n      displayName: displayName,\n      context: this.getOptions().context || {},\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.observableQueryFields = function (observable) {\n    return {\n      variables: observable.variables,\n      refetch: observable.refetch.bind(observable),\n      fetchMore: observable.fetchMore.bind(observable),\n      updateQuery: observable.updateQuery.bind(observable),\n      startPolling: observable.startPolling.bind(observable),\n      stopPolling: observable.stopPolling.bind(observable),\n      subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign({}, observableQueryOptions, {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(observableQueryOptions);\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n    }\n\n    var newObservableQueryOptions = __assign({}, this.prepareObservableQueryOptions(), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n\n        if (_this.previousData.result && _this.previousData.result.loading === loading && _this.previousData.result.networkStatus === networkStatus && equal(_this.previousData.result.data, data || {})) {\n          return;\n        }\n\n        _this.forceUpdate();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n\n        if (!equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = {\n      data: Object.create(null)\n    };\n    Object.assign(result, this.observableQueryFields(this.currentObservable.query));\n\n    if (this.getOptions().skip) {\n      result = __assign({}, result, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n      data = data || Object.create(null);\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      Object.assign(result, {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result ? this.previousData.result.data : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = this.getOptions().partialRefetch;\n\n        if (partialRefetch && Object.keys(data).length === 0 && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var _a = this.currentObservable.query.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: updatedOptions,\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [result]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables))) {\n      this.endSubscription();\n      delete this.currentObservable.query;\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign({}, currentResult, {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    loading: true,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import React from 'react';\n\nexport function ErrorMessage({ error }) {\n  return (\n    <div>\n      Error occurred: {JSON.stringify(error)}\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\n\nexport function CountryDetail({ country }) {\n  return (\n    <Fragment>\n      <h2>{country.name}</h2>\n\n      <div className=\"currency\">\n        <div className=\"label\">Currency</div>\n        {country.currency || 'None'}\n      </div>\n\n      <div className=\"phone\">\n        <div className=\"label\">Phone code</div>\n        +{country.phone || '000'}\n      </div>\n    </Fragment>\n  );\n}\n","import React from 'react';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nimport { Loading } from './Loading';\nimport { ErrorMessage } from './ErrorMessage';\nimport { CountryDetail } from './CountryDetail';\n\nimport './CountryDetails.scss';\n\nexport default function CountryDetails({ match }) {\n  const { loading, error, data } = useQuery(gql`\n    {\n        country(code: \"${match.params.code}\") {\n            name\n            code\n            phone\n            currency\n        }\n    }\n  `);\n\n  const country = (error ? null : data.country);\n\n  return (\n    <div id=\"country-details\">\n      {loading ? <Loading /> : (error ? <ErrorMessage error={error} /> : <CountryDetail country={country} />)}\n    </div>\n  );\n}\n"],"sourceRoot":""}